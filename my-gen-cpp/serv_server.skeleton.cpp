/*************************************************************************
	> File Name: serv_server.skeleton.cpp
	> Author: wk
	> Mail: 18402927708@163.com
	> Created Time: 2018年03月13日 星期二 19时12分53秒
 ************************************************************************/

// This autogenerated skeleton file illustrates how to build a server.
// // You should copy it to another filename to avoid overwriting it.

#include "serv.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

//using namespace  ;

class servHandler : virtual public servIf {
    public:
        servHandler() {
            // Your initialization goes here
        }

        int32_t put(const student& s) {
            // Your implementation goes here
            printf("put: s.no:%d\n",s.no);
            printf("put: s.name:%s\n",s.name.c_str());
            printf("put: s.age:%d\n",s.age);
            return 0;
        }

        int32_t tell_me_time() {
            // Your implementation goes here
            time_t now_time = time(NULL);
            printf("nowtime: %d\n",now_time);
            return (int32_t)now_time;
        }

};

int main(int argc, char **argv) {
    int port = 9090;
    shared_ptr<servHandler> handler(new servHandler());
    shared_ptr<TProcessor> processor(new servProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}




